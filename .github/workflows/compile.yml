name: Compile for Windows, Linux and macOS

on:
  workflow_call:
    outputs:
      project-name:
        description: The name of the project being built.
        value: ${{ jobs.build.outputs.project-name }}
      build-dir:
        description: The directory where the build artifacts are located.
        value: ${{ jobs.build.outputs.build-dir }}
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true

      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        build_type: [MinSizeRel]
        cpp_compiler: [clang++]
    
    outputs:
      project-name: ${{ steps.strings.outputs.project-name }}
      build-dir: ${{ steps.strings.outputs.build-dir }}

    steps:
    - name: Get repository files
      uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs.
      id: strings
      shell: bash
      run: |
        echo "build-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "source-dir=${{ github.workspace }}/src" >> "$GITHUB_OUTPUT"
        echo "project-name=`grep 'project(' 'src/CMakeLists.txt' | perl -pe 's/.*\((.*?)\s.*/$1/'`" >> "$GITHUB_OUTPUT"

    - name: Update to the latest version of CMake
      uses: lukka/get-cmake@latest

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required for single-configuration generators such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ steps.strings.outputs.source-dir }}

    - name: Build
      # Build the program with the given configuration. --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-dir }} --config ${{ matrix.build_type }}

    - name: Move executable to base folder on Windows
      if: runner.os == 'Windows'
      run: |
        mv ${{ steps.strings.outputs.build-dir }}/${{ matrix.build_type }}/${{ steps.strings.outputs.project-name }}.exe ${{ steps.strings.outputs.build-dir }}/${{ steps.strings.outputs.project-name }}.exe
        rmdir ${{ steps.strings.outputs.build-dir }}/${{ matrix.build_type }}

    - name: Upload executable files to repository
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.strings.outputs.project-name }}-${{ matrix.os }}
        path: |
          ${{ steps.strings.outputs.build-dir }}/${{ steps.strings.outputs.project-name }}
          ${{ steps.strings.outputs.build-dir }}/${{ steps.strings.outputs.project-name }}.exe
        compression-level: 9
